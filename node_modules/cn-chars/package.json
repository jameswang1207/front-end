{
  "name": "cn-chars",
  "version": "0.1.1",
  "description": "一个对简体和繁体汉字相互转化的Node.js模块",
  "main": "cn-chars.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "mocha ./test/cn-chars-test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/liushuping/cn-chars"
  },
  "keywords": [
    "简体",
    "繁体",
    "汉字",
    "cn",
    "node",
    "javascript",
    "character"
  ],
  "author": {
    "name": "Shuping LIU"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/liushuping/cn-chars/issues"
  },
  "homepage": "https://github.com/liushuping/cn-chars",
  "devDependencies": {
    "mocha": "*"
  },
  "readme": "﻿cn-chars\r\n========\r\n\r\n一个对简体和繁体汉字相互转化的Node.js模块\r\n\r\n[![build status](https://travis-ci.org/liushuping/cn-chars.svg)](https://travis-ci.org/liushuping/cn-chars.svg)\r\n\r\n## 使用\r\n```javascript\r\nvar cnchars = require('cn-chars');\r\n```\r\n## 接口\r\n**toSimplifiedChar(cnChar)**\r\n\r\n转化输入的汉字`cnChar`为简体形式。若输入的汉字为简体形式，则输出原汉字；若输入的汉字无相应简体形式，则输出原汉字。函数只接受一个汉字的输入，多余汉字将被忽略。\r\n\r\n**toTraditionalChar(cnChar)**\r\n\r\n转化输入的汉字`cnChar`为繁体形式。若输入的汉字为繁体形式，则输出原汉字；若输入的汉字无相应繁体形式，则输出原汉字。函数只接受一个汉字的输入，多余汉字将被忽略。\r\n## 示例\r\n```javascript\r\nvar cnchars = require('cn-chars');\r\nvar cnChar = '话';\r\nvar result = cnchars.toTraditionalChar(cnChar);\r\nconsole.log(result); // output: 話\r\n\r\ncnChar = '鐘';\r\nresult = cnchars.toSimplifiedChar(cnChar);\r\nconsole.log(result); //output: 钟\r\n```\r\n\r\n## Test\r\nMake sure `mocha` is installed globally\r\n\r\n```\r\nnpm install mocha -g\r\n```\r\nRun `npm test` to run unit test\r\n\r\n## License\r\nMIT\r\n",
  "readmeFilename": "README.md",
  "_id": "cn-chars@0.1.1",
  "dist": {
    "shasum": "bee620b919aac50f59982c4ff6016f80f812d5df"
  },
  "_from": "cn-chars@0.1.1",
  "_resolved": "https://registry.npmjs.org/cn-chars/-/cn-chars-0.1.1.tgz"
}
